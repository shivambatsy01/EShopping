ðŸ§© 1. The Big Picture â€” Request Flow in a .NET API
When an HTTP request hits your API endpoint:
HTTP Request â†’ ASP.NET Middleware Pipeline â†’ Controller â†’ MediatR â†’ Behaviours â†’ Handler â†’ Response

Behaviours (ValidationBehaviour, UnhandledExceptionBehaviour) : 
These only run inside MediatR â€” they donâ€™t directly handle HTTP responses. 
So when a ValidationException or any other exception is thrown, it bubbles up out of the MediatR pipeline, back to the ASP.NET Core middleware pipeline.
Thatâ€™s where your app can catch it globally


ðŸ§± 2. What Happens by Default (Without Any Middleware)
If you donâ€™t have any global exception middleware: The exception (like ValidationException) bubbles all the way up.
ASP.NET catches it. The application does not crash, but it returns a generic 500 Internal Server Error response like:.


ðŸ§  3. The Right Way â€” Add a Global Exception Middleware
A global exception middleware sits in the ASP.NET Core request pipeline and handles all uncaught exceptions â€” including ones thrown from MediatR behaviors.
This is where your app decides: What HTTP status code to return. What error message or structure to show.